<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Личный сайт Ивана Белашкина</title><link>https://tookser.github.io/</link><description>Recent content on Личный сайт Ивана Белашкина</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sat, 06 Aug 2022 01:03:32 +0300</lastBuildDate><atom:link href="https://tookser.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Свет в окне</title><link>https://tookser.github.io/posts/semantic_highlighting/</link><pubDate>Sat, 06 Aug 2022 01:03:32 +0300</pubDate><guid>https://tookser.github.io/posts/semantic_highlighting/</guid><description>Semantic highlighting (семантическая подсветка) - что это такое?
При обычной подсветке кода разными цветами обозначаются ключевые слова, имена переменных, литералы. При этом все переменные, например, подсвечиваются одним цветом. Для того, чтобы проще их различать, можно было бы раскрасить их в разные цвета. Это, по идее, должно давать некоторый бонус к внимательности - можно проще искать взглядом ту или иную переменную, если видишь одно её вхождение.
Программные реализации: Sublime https://www.sublimetext.com/docs/color_schemes.html#hashed_syntax_highlighting - в Sublime Text 3 эта возможность &amp;ldquo;из коробки&amp;rdquo;, без плагинов, достаточно лишь задать цвета в цветовой схеме.</description><content>&lt;p>&lt;strong>Semantic highlighting&lt;/strong> (семантическая подсветка) - что это такое?&lt;/p>
&lt;p>При обычной подсветке кода разными цветами обозначаются ключевые слова, имена переменных, литералы. При этом все переменные, например, подсвечиваются одним цветом. Для того, чтобы проще их различать, можно было бы раскрасить их в разные цвета. Это, по идее, должно давать некоторый бонус к внимательности - можно проще искать взглядом ту или иную переменную, если видишь одно её вхождение.&lt;/p>
&lt;p>&lt;img src="https://tookser.github.io/semantic.png" alt="Пример семантической подсветки © Evan Brooks">&lt;/p>
&lt;h2 id="программные-реализации">Программные реализации:&lt;/h2>
&lt;h3 id="sublime">Sublime&lt;/h3>
&lt;p>&lt;a href="https://www.sublimetext.com/docs/color_schemes.html#hashed_syntax_highlighting">https://www.sublimetext.com/docs/color_schemes.html#hashed_syntax_highlighting&lt;/a> - в &lt;strong>Sublime Text 3&lt;/strong> эта возможность &amp;ldquo;из коробки&amp;rdquo;, без плагинов, достаточно лишь задать цвета в цветовой схеме.&lt;/p>
&lt;p>Для тёмной темы на hackernews рекомендуют цветовую схему &lt;strong>Monnokay&lt;/strong> (sic!, не Monokai), &lt;a href="https://github.com/cixtor/monnokay">https://github.com/cixtor/monnokay&lt;/a> . Ставится вручную, правда. Скорее всего, можно настроить и лучше, в принципе можно задавать градиент произвольным списком цветов, а в Monnokay только 2.&lt;/p>
&lt;h3 id="не-sublime">Не Sublime&lt;/h3>
&lt;p>В &lt;strong>Atom&lt;/strong> и &lt;strong>emacs&lt;/strong> тоже есть.&lt;/p>
&lt;p>Пошло всё вроде как изначально от KDevelop, и потом - &lt;a href="https://medium.com/@evnbr/coding-in-color-3a6db2743a1e">статьи Evan Brooks&lt;/a>.&lt;/p>
&lt;p>В &lt;strong>Visual Studio Code&lt;/strong> есть что-то с таким названием, но я посмотрел доки - эффекта разноцветных переменных там не декларируется. &lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide">https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide&lt;/a>&lt;/p>
&lt;p>&lt;strong>DrRacket&lt;/strong> - он для языка Racket (вроде лиспа), но для схожих целей рисует стрелочки между одинаковыми переменными при наведении.&lt;/p>
&lt;h3 id="неактуальное">Неактуальное&lt;/h3>
&lt;p>Плагин для Sublime Colorcoder (последнее обновление в 2014) - у меня не работает, в причинах не разбирался.&lt;/p>
&lt;h3 id="мысли-на-тему">Мысли на тему&lt;/h3>
&lt;p>Довольно случайно и out of serendipity наткнулся на эту красивую идею. Кажется, отсюда может получиться некоторое количество задачек на хеширование для алгоритмических контестов. Возможно, часть из них будет осмысленна.&lt;/p>
&lt;p>Я бы поостерёгся делать переменные с близкими названиями почти одноцветными - часто их полезно различать. Кроме того, помимо цвета букв идентификатора может быть ещё и цвет фона - и тут появляются вопросы контрастности, но зато сразу увеличивается вероятность различия раскраски идентификатора. Наконец, можно просто красить в разные цвета и хранить это в дополнительном файле, что позволит поддерживать &amp;ldquo;разноцветность&amp;rdquo; и &amp;ldquo;устойчивость цвета во времени&amp;rdquo; (это есть и так, но без условия поддержания разноцветности; можно ещё добавить относительно переименований посредством среды разработки, хотя это не особо нужно, кажется), и это нужно будет хранить во внешнем файле каком-то. Что-то вроде &lt;code>.semantic_colors&lt;/code>. И не редактировать файлы ничем другим, кроме выбранного редактора.&lt;/p>
&lt;p>По ощущениям, чуть-чуть связано с literate programming.&lt;/p></content></item><item><title>GURPS и прочее</title><link>https://tookser.github.io/posts/hello_gurps/</link><pubDate>Sun, 24 Jul 2022 18:55:51 +0300</pubDate><guid>https://tookser.github.io/posts/hello_gurps/</guid><description>Этот пост скорее несерьёзный.
Ролевые игры - это что-то вроде театра, только часть режиссирующих функций перекладывается на актёров (&amp;ldquo;игроков&amp;rdquo;). Игроки сами могут выбирать своё поведение (в рамках правил). При этом есть и режиссёры (&amp;ldquo;мастера&amp;rdquo;), которые определяют ещё до начала игры сюжет, правила взаимодействий и организовывают всё это. На масштабные ролевые игры могут собираться тысячи людей, в костюмах отыгрываемого мира, с обмундированием, и это им ещё где-то нужно жить и что-то есть.</description><content>&lt;p>Этот пост скорее несерьёзный.&lt;/p>
&lt;p>&lt;strong>Ролевые игры&lt;/strong> - это что-то вроде театра, только часть режиссирующих функций перекладывается на актёров (&amp;ldquo;игроков&amp;rdquo;). Игроки сами могут выбирать своё поведение (в рамках правил). При этом есть и режиссёры (&amp;ldquo;мастера&amp;rdquo;), которые определяют ещё до начала игры сюжет, правила взаимодействий и организовывают всё это. На масштабные ролевые игры могут собираться тысячи людей, в костюмах отыгрываемого мира, с обмундированием, и это им ещё где-то нужно жить и что-то есть.&lt;/p>
&lt;p>С таким размахом ролевые игры обычно не делают. Часто ролевые игры являются &lt;strong>словесными&lt;/strong> - игроки словами (устно или на форуме) описывают действия своих персонажей, обычно в рамках какой-то механики. Механика же обычно берётся готовая - такие системы как D&amp;amp;D, GURPS и другие описывают, что и по каким правилам делается (обычно интересуются сражениями и заклинаниями, но порой подробно прописывают и социальные механики, и какие-то экзотические вроде хакинга). Ещё эти системы описывают миры, в которых происходит действо.&lt;/p>
&lt;p>Сейчас речь пойдёт о &lt;a href="https://ru.wikipedia.org/wiki/GURPS">&lt;strong>GURPS&lt;/strong>&lt;/a>. В этой системе результаты действий определяются бросками трёх обычных кубиков, и в зависимости от модификаторов успешность действия смещается в ту или иную сторону. Но речь совсем не об этом.&lt;/p>
&lt;p>В GURPS персонажи игроков могут иметь специализацию (воин, маг, вор&amp;hellip; а как вам &lt;em>специалист по истории древнего мира&lt;/em>?). И пусть персонаж хорошо знает историю древнего мира. Наверняка он будет знать историю и других эпох, но хуже, хотя и лучше среднего человека. Возникает вопрос про существование чего-то такого же в реальности. Это я и хотел бы тут в дальнейшем поисследовать.&lt;/p>
&lt;p>Несколько ссылок:&lt;/p>
&lt;ul>
&lt;li>Про N-Back - &lt;a href="https://www.gwern.net/DNB-FAQ">Gwern-1&lt;/a>, &lt;a href="https://www.gwern.net/DNB-meta-analysis">Gwern-2&lt;/a>. Это две статьи про упражнение N-back и рассуждения со ссылками на литературу про его эффективность в развитии fluid intelligence (~интеллект в целом). Здесь &amp;ldquo;перенос&amp;rdquo; предполагается с эффективности в данном упражнении на все задачи.&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/N-back">https://en.wikipedia.org/wiki/N-back&lt;/a> - англовики про N-back.&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Transfer_of_learning">https://en.wikipedia.org/wiki/Transfer_of_learning&lt;/a> - англовики про Transer of learning.&lt;/li>
&lt;/ul>
&lt;p>После написания почему-то захотелось найти партию для ролевой игры на каких-нибудь выходных.&lt;/p></content></item><item><title>Как решать задачи и делать запросы</title><link>https://tookser.github.io/posts/interesting_things3_math/</link><pubDate>Thu, 21 Apr 2022 23:21:25 +0300</pubDate><guid>https://tookser.github.io/posts/interesting_things3_math/</guid><description>Как думать математику Книга &amp;ldquo;Как решать задачу&amp;rdquo; Джорджа Полиа (Дьёрдя Пойа) когда-то очень понравилась мне тем, что была близка к каркасу самоучителя математики. Да, есть математические книги, по которым удобно учиться самому, но это не все книги, мягко говоря. А вот эта книга была бы максимально удобна в качестве методического ассистента по освоению менее дружелюбной математической литературы.
Серьёзной математики в этой книге мало/почти нет, но у него же есть, например, &amp;ldquo;Математика и правдоподобные рассуждения&amp;rdquo; в двух томах, где уже есть задачи после каждой главы.</description><content>&lt;h2 id="как-думать-математику">Как думать математику&lt;/h2>
&lt;p>Книга &amp;ldquo;Как решать задачу&amp;rdquo; Джорджа Полиа (Дьёрдя Пойа) когда-то очень понравилась мне тем, что была близка к каркасу самоучителя математики. Да, есть математические книги, по которым удобно учиться самому, но это не все книги, мягко говоря. А вот эта книга была бы максимально удобна в качестве методического ассистента по освоению менее дружелюбной математической литературы.&lt;/p>
&lt;p>&lt;img src="https://tookser.github.io/poia.jpg" alt="Обложка русского издания книги &amp;ldquo;Как решать задачу&amp;rdquo;">&lt;/p>
&lt;p>Серьёзной математики в этой книге мало/почти нет, но у него же есть, например, &amp;ldquo;Математика и правдоподобные рассуждения&amp;rdquo; в двух томах, где уже есть задачи после каждой главы. Не как на мехмате, но ближе. Сам Пойа работал как математик в разных областях, от матанализа до комбинаторики, и, кажется, &lt;a href="https://neerc.ifmo.ru/wiki/index.php?title=%D0%9B%D0%B5%D0%BC%D0%BC%D0%B0_%D0%91%D1%91%D1%80%D0%BD%D1%81%D0%B0%D0%B9%D0%B4%D0%B0_%D0%B8_%D0%A2%D0%B5%D0%BE%D1%80%D0%B5%D0%BC%D0%B0_%D0%9F%D0%BE%D0%B9%D0%B0">теорема Пойа&lt;/a> из комбинаторики (рекомендую!) тоже его.&lt;/p>
&lt;p>Есть &lt;a href="https://www.mccme.ru/free-books/olymp/KanKov.pdf">другая книга&lt;/a>, Канель-Белов, Ковальджи - &amp;ldquo;Как решают нестандартные задачи&amp;rdquo;, - но она как раз ориентирована на школьные мат. олимпиады, хотя методические советы там тоже есть.&lt;/p>
&lt;p>&lt;img src="https://tookser.github.io/sova.jpg" alt="Обложка книги &amp;ldquo;Как решать нестандартные задачи&amp;rdquo;">&lt;/p>
&lt;p>А вот Барбару Оакли, &amp;ldquo;Думай как математик&amp;rdquo; не рекомендую для заявленной цели. Она скорее про менее специфичный процесс учёбы. Курс &amp;ldquo;Learning How To Learn&amp;rdquo; тоже.&lt;/p>
&lt;h2 id="что-я-бы-сказал-себе-олимпиаднику">Что я бы сказал себе-олимпиаднику&lt;/h2>
&lt;p>Если бы я отправился в прошлое, и захотел бы сказать что-то полезное себе-как-матолимпиаднику, я, наверное,&lt;/p>
&lt;ul>
&lt;li>Сдвинул бы соотношение &amp;ldquo;я объясняю / мне объясняют&amp;rdquo; вправо;&lt;/li>
&lt;li>
&lt;ul>
&lt;li>хотя бы просто больше ходил на кружки.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Постарался бы сделать занятия математикой эстетичными для себя.&lt;/li>
&lt;li>
&lt;ul>
&lt;li>хотя бы иногда смотрел красивые околонаучные видео.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Кажется, это дало бы много эффекта или хоть какой-то.&lt;/p>
&lt;p>Что про сам процесс решения задач на олимпиаде — мне кажется, как раз он был вполне оптимален; совет &amp;ldquo;не зацикливайся на одной задаче, пробуй по очереди по кругу&amp;rdquo; хотелось бы дать, но его я соблюдал. Разве что попросил бы себя не уходить за 10 минут до конца от усталости, что иногда случалось — но вряд ли эта просьба что-то улучшила.&lt;/p>
&lt;h2 id="ссылки-и-книги-по-алгоритмам">Ссылки и книги по алгоритмам&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://neerc.ifmo.ru/wiki/index.php?title=%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0">Вики-конспекты&lt;/a> университета ИТМО — собрание материалов по математике и CS. Вроде бы конспекты там делятся на проверяемые и непроверяемые, и первые должны быть лучшего качества. Попадался на неясную логику или перевод из англоязычного источника в паре мест.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://e-maxx.ru/">https://e-maxx.ru/&lt;/a> — наиболее популярный источник информации по алгоритмам.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>К сожалению, многие доказательства в алгоритмах кажутся написанными достаточно невнятно в обоих источниках, да и много где ещё. Можно, конечно, избегать доказательств. Но скучновато.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t.me/avvablog/1229">https://t.me/avvablog/1229&lt;/a> — пост про то, как делать SQL-запросы к StackOverFlow и StackExchange (с) &lt;a href="https://t.me/avvablog">Авва&lt;/a>. Кратко, он сводится к ссылке на &lt;a href="https://data.stackexchange.com/mathoverflow/query/1378063">https://data.stackexchange.com/mathoverflow/query/1378063&lt;/a>, это топ самых забукмаркленных вопросов на mathoverflow. Можно поменять один сайт на другой просто выбором из выпадающего меню. Например, можно поискать по русскому стэковерфлоу (оттуда нашёл список русской литературы по Java, например).&lt;/li>
&lt;/ul></content></item><item><title>ModernCV и мытарства</title><link>https://tookser.github.io/posts/moderncv/</link><pubDate>Fri, 15 Apr 2022 14:51:22 +0300</pubDate><guid>https://tookser.github.io/posts/moderncv/</guid><description>Для справки, LaTeX - система вёрстки, обычно для научных статей, Docker - система для контейнеризации (нечто вроде виртуальной машины).
Немного предыстории. ModernCV - шаблон для LaTeX, позволяющий писать красивенькие резюме в pdf. Требует небольшого знания LaTeX-а. В документации можно посмотреть, как выглядит.
Этот шаблон почему-то упорно не хотел нормально собираться на моей системе, и в итоге нашлось более хорошее решение.
Вот ссылка на docker-образ образ докера с texlive. В нём это резюме собирается следующим образом (рассказываю вариант под Linux с установленным Docker).</description><content>&lt;p>Для справки, &lt;strong>LaTeX&lt;/strong> - система вёрстки, обычно для научных статей, &lt;strong>Docker&lt;/strong> - система для контейнеризации (нечто вроде виртуальной машины).&lt;/p>
&lt;p>Немного предыстории. &lt;strong>&lt;a href="https://github.com/moderncv/moderncv">ModernCV&lt;/a>&lt;/strong> - шаблон для LaTeX, позволяющий писать красивенькие резюме в pdf. Требует небольшого знания LaTeX-а. В &lt;a href="https://github.com/moderncv/moderncv/raw/master/manual/moderncv_userguide.pdf">документации&lt;/a> можно посмотреть, как выглядит.&lt;/p>
&lt;p>Этот шаблон почему-то упорно не хотел нормально собираться на моей системе, и в итоге нашлось более хорошее решение.&lt;/p>
&lt;p>Вот &lt;a href="https://github.com/moderncv/debian-texlive-docker/pkgs/container/debian-texlive-docker">ссылка на docker-образ&lt;/a> образ докера с texlive. В нём это резюме собирается следующим образом (рассказываю вариант под Linux с установленным Docker).&lt;/p>
&lt;p>Сначала&lt;/p>
&lt;p>&lt;code>docker pull ghcr.io/moderncv/debian-texlive-docker:main&lt;/code> - скачивание docker-образа.&lt;/p>
&lt;p>Потом создаём контейнер&lt;/p>
&lt;p>&lt;code>docker run -it -v &amp;quot;/путь/к/папке/с/резюме:/mnt&amp;quot; --name ИмяОбраза ghcr.io/moderncv/debian-texlive-docker:main /bin/bash&lt;/code>&lt;/p>
&lt;p>Это создаёт docker-контейнер по скачанному docker-образу И запускает его. &lt;em>ИмяОбраза&lt;/em> и &lt;em>/путь/к/папке/с/резюме&lt;/em> (на вашем диске) нужно заполнить самим. &lt;code>-it&lt;/code> позволяет работать в терминале внутри контейнера, &lt;code>-v&lt;/code> монтирует папку к пути &lt;code>/mnt&lt;/code> &lt;em>внутри&lt;/em> докер-контейнера (то есть с папкой &lt;code>/mnt&lt;/code> исходной системы ничего не происходит).&lt;/p>
&lt;p>Теперь нужно выполнить команду&lt;/p>
&lt;p>&lt;code>docker start ИмяКонтейнера&lt;/code>&lt;/p>
&lt;p>и&lt;/p>
&lt;p>&lt;code>docker exec -it ИмяКонтейнера /bin/bash&lt;/code>&lt;/p>
&lt;p>. Вы окажетесь в терминале, откуда уже можно собрать резюме с помощью TexLive, зайдя в директорию &lt;code>/mount&lt;/code>. Возможно, понадобится что-то догрузить из пакетов - &lt;code>apt install ...&lt;/code> (без &lt;code>sudo&lt;/code> почему-то в этом образе работает) вполне помогало, если вообще понадобилось.&lt;/p>
&lt;p>В конце можно остановить контейнер с помощью&lt;/p>
&lt;p>&lt;code>docker stop ИмяКонтейнера&lt;/code>&lt;/p>
&lt;p>.&lt;/p>
&lt;p>При повторных использованиях всё так же, начиная с команды&lt;/p>
&lt;p>&lt;code>docker start ИмяКонтейнера&lt;/code>&lt;/p>
&lt;p>.&lt;/p>
&lt;p>Два момента:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>блокируется доступ&lt;/strong> на запись к файлам в монтируемой папке, что неудобно.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>судя по всему, можно автоматизировать.&lt;/p>
&lt;/li>
&lt;/ul></content></item><item><title>Полином Жегалкина</title><link>https://tookser.github.io/posts/jegalkin/</link><pubDate>Fri, 15 Apr 2022 11:18:53 +0300</pubDate><guid>https://tookser.github.io/posts/jegalkin/</guid><description>Многие, наверное, знают о полиномах Жегалкина, это известный способ задания функции алгебры логики. Выглядят они примерно так:
G(x,y,z) = xy ⊕ yz ⊕ x
Разумеется, длина каждой конъюнкции может быть произвольной, как и их количество. Порядок их не имеет значение, и конъюнкции не должны повторяться (от повторов можно избавляться, уничтожая &amp;ldquo;дубли&amp;rdquo; парами). Также возможна конъюнкция длины 0, обозначаемая &amp;ldquo;1&amp;rdquo;.
У полиномов Жегалкина есть одно замечательное и простое свойство: каждая функция представима ровно одним полиномом Жегалкина.</description><content>&lt;p>Многие, наверное, знают о полиномах Жегалкина, это известный способ задания функции алгебры логики. Выглядят они примерно так:&lt;/p>
&lt;p>&lt;strong>G(x,y,z) = xy ⊕ yz ⊕ x&lt;/strong>&lt;/p>
&lt;p>Разумеется, длина каждой &lt;a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%8A%D1%8E%D0%BD%D0%BA%D1%86%D0%B8%D1%8F">конъюнкции&lt;/a> может быть произвольной, как и их количество. Порядок их не имеет значение, и конъюнкции не должны повторяться (от повторов можно избавляться, уничтожая &amp;ldquo;дубли&amp;rdquo; парами). Также возможна конъюнкция длины &lt;strong>0&lt;/strong>, обозначаемая &amp;ldquo;&lt;strong>1&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>У полиномов Жегалкина есть одно замечательное и простое свойство: каждая функция представима ровно одним полиномом Жегалкина.&lt;/p>
&lt;p>Доказывается это так. Сначала заметим, что сумма (сложение по модулю 2) произвольных двух полиномов Жегалкина равна &lt;strong>0&lt;/strong> тогда и только тогда, когда они совпадают (иначе бы нашлось бы два разных значения, и он где-то равнялся бы &lt;strong>1&lt;/strong>). Теперь возьмём два разных полинома Жегалкина (&amp;ldquo;разных&amp;rdquo; здесь - разных по записи), и сложим их попарно. У нас получится некоторый новый полином Жегалкина.&lt;/p>
&lt;p>Теперь посмотрим, чему он равен: &lt;strong>0&lt;/strong> он не может равняться, т.к. полиномы разные, значит, в нём есть конъюнкции. Тогда возьмём какую-то конъюнкцию минимальной длины, и сделаем все её переменные единицами, а остальные - нулями. На этих переменных полином будет отличаться от значения на &amp;ldquo;всех нулях&amp;rdquo;, и тогда у нас найдётся значение &lt;strong>1&lt;/strong> среди этих двух, либо же полином &amp;ldquo;разности&amp;rdquo; изначально равнялся &lt;strong>1&lt;/strong>.&lt;/p>
&lt;p>Мы доказали, что все полиномы Жегалкина дают разные функции. Осталось заметить только, что, так как конъюнкций &lt;strong>n&lt;/strong> переменных существует &lt;strong>2^n&lt;/strong>, полиномов будет &lt;strong>2^(2^n)&lt;/strong>, что совпадает с числом булевых функций от &lt;strong>n&lt;/strong> переменных.&lt;/p>
&lt;p>Наверное, самое красивое среди булевой логики первого курса. Нет, ещё &lt;a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D1%82%D0%B5%D1%80%D0%B8%D0%B9_%D0%9F%D0%BE%D1%81%D1%82%D0%B0">теорема Поста&lt;/a> о 5 предполных классах. И автоматы с задержкой.&lt;/p></content></item><item><title>Об Obsidian для тех, кому надоели лонгриды на эту тему</title><link>https://tookser.github.io/posts/obsidian/</link><pubDate>Wed, 02 Feb 2022 12:27:20 +0300</pubDate><guid>https://tookser.github.io/posts/obsidian/</guid><description>obsidian.md - сайт, с которого можно взять эту программу. Бесплатная, но не open-source. Есть опенсорсные аналоги, Foam и Memo (и то и другое основывается на VS Code).
Что она даёт:
Возможность почти жонглировать сотнями заметок с кусочками информации - от технических заметок до запомнившихся fun-fact&amp;rsquo;ов. Ссылки, хештеги, полнотекстовый поиск, папочная структура. Отсутствие привязки к программе - всё в markdown, простых текстовых файлах. Граф знаний - самая красивая, но малополезная штука.</description><content>&lt;p>&lt;a href="https://obsidian.md">obsidian.md&lt;/a> - сайт, с которого можно взять эту программу. Бесплатная, но не open-source. Есть опенсорсные аналоги, &lt;a href="https://foambubble.github.io/foam/">Foam&lt;/a> и &lt;a href="https://marketplace.visualstudio.com/items?itemName=svsool.markdown-memo">Memo&lt;/a> (и то и другое основывается на VS Code).&lt;/p>
&lt;p>Что она даёт:&lt;/p>
&lt;ul>
&lt;li>Возможность почти жонглировать сотнями заметок с кусочками информации - от технических заметок до запомнившихся fun-fact&amp;rsquo;ов.&lt;/li>
&lt;li>Ссылки, хештеги, полнотекстовый поиск, папочная структура.&lt;/li>
&lt;li>Отсутствие привязки к программе - всё в markdown, простых текстовых файлах.&lt;/li>
&lt;li>Граф знаний - самая красивая, но малополезная штука.&lt;/li>
&lt;li>Хорошее копирование - при копировании в страницы Obsidian из веб-страниц или телеграма копируется сразу вместе со ссылками, но можно копировать и как просто текст.&lt;/li>
&lt;li>Также есть приличное количество плагинов даже &amp;ldquo;из коробки&amp;rdquo;, таких как диктофон, плагины для синхронизации/публикации/создания презентаций, случайная заметка (для расслабленного хождения по хранилищу).&lt;/li>
&lt;li>Есть режим для vim.&lt;/li>
&lt;/ul>
&lt;p>Для начала рекомендую частично познакомиться со справочным хранилищем и некоторыми горячими клавишами (мне почти всегда хватает одних &lt;code>Ctrl+E&lt;/code>, &lt;code>Ctrl+клик по ссылке&lt;/code>, &lt;code>Ctrl+O&lt;/code> и &lt;code>Ctrl+Shift+F&lt;/code>).&lt;/p>
&lt;p>Поддерживайте связность, хотя бы в большей части заметок. Заводите хештеги, заводите страницы-оглавления по темам, делайте перекрёстные ссылки.&lt;/p>
&lt;p>Пользуйтесь разметкой. Из неочевидного - если выделить текст тремя апострофами, и написать название языка в первой строке - он будет распознаваться как код на этом языке.&lt;/p>
&lt;p>Не бойтесь менять структуру, дополнять списки, разбивать их на подсписки, вводить новые хештеги и так далее. Здесь важно слово &amp;ldquo;постепенность&amp;rdquo;.&lt;/p>
&lt;p>Obsidian возможно использовать как планировщик - по крайней мере, GTD-шный инбокс в нём приятно держать одной заметкой, если много работаешь на этом компьютере.&lt;/p>
&lt;p>Иногда можно менять тему оформления. Также, если хотите, можно выключить автообновление, чтобы точно ничего не произошло с приложением.&lt;/p>
&lt;p>Пока что, на примерно 500 объектов (кроме заметок, ещё есть вложения и папки, но их мало) желание вести не иссякло, и пользу иногда приносит.&lt;/p></content></item><item><title>Интересные вещи и где они обитают-2</title><link>https://tookser.github.io/posts/interesting_things2/</link><pubDate>Wed, 02 Feb 2022 11:36:14 +0300</pubDate><guid>https://tookser.github.io/posts/interesting_things2/</guid><description>Некоторое время назад наткнулся на сайт https://agnessa.pp.ru. Сама создательница называет его &amp;ldquo;сад знаний&amp;rdquo;, и это хорошее название. Что-то про IT, emacs, но не только, подборки книг оттуда воодушевляют, есть и про кулинарию. Построен по типу вики, с выведенным на главную перечнем обновлений. Это открытая часть личной базы знаний.
Оттуда, свежее - небольшая подборка для чтения.
Ещё один сайт похожего типа, хотя вроде бы более линейный по структуре - https://qejep.github.io/.
Там, например, можно найти карту мира в терминале - просто введите в консоли telnet mapscii.</description><content>&lt;p>Некоторое время назад наткнулся на сайт &lt;a href="https://agnessa.pp.ru">https://agnessa.pp.ru&lt;/a>. Сама создательница называет его &amp;ldquo;сад знаний&amp;rdquo;, и это хорошее название. Что-то про IT, emacs, но не только, подборки книг оттуда воодушевляют, есть и про кулинарию. Построен по типу вики, с выведенным на главную перечнем обновлений. Это открытая часть личной базы знаний.&lt;/p>
&lt;p>Оттуда, свежее - &lt;a href="https://qejep.github.io/readinglist.html">небольшая подборка для чтения&lt;/a>.&lt;/p>
&lt;p>Ещё один сайт похожего типа, хотя вроде бы более линейный по структуре - &lt;a href="https://qejep.github.io/">https://qejep.github.io/&lt;/a>.&lt;/p>
&lt;p>Там, например, можно найти карту мира в терминале - просто введите в консоли &lt;code>telnet mapscii.me&lt;/code>. Клавиши &lt;code>a&lt;/code> и &lt;code>z&lt;/code> - увеличение, стрелки - передвижение.&lt;/p>
&lt;p>Пост вышел немного &amp;ldquo;мета-&amp;rdquo;, т.к. половина - ссылки на другие личные сайты. Не страшно.&lt;/p></content></item><item><title>Парадокс Гетье о знании</title><link>https://tookser.github.io/posts/knowledge/</link><pubDate>Wed, 02 Feb 2022 10:43:25 +0300</pubDate><guid>https://tookser.github.io/posts/knowledge/</guid><description>Люблю почему-то этот логический парадокс. Да и другие парадоксы, желающие познакомиться с ними могут начать отсюда (это категория Википедии, содержащая все описанные в ней парадоксы).
Давно писал.
В философии считалось, что человек знает о чём-то (а не просто &amp;ldquo;считает&amp;rdquo;), когда
а) это истинно
б) человек убеждён в этом
в) у человека есть основания так полагать.
Иными словами, знание = обоснованное верное убеждение.
Однако в 1963 году вышла краткая статья Эдмунда Л.</description><content>&lt;p>Люблю почему-то этот логический парадокс. Да и другие парадоксы, желающие познакомиться с ними могут начать &lt;a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%9F%D0%B0%D1%80%D0%B0%D0%B4%D0%BE%D0%BA%D1%81%D1%8B">отсюда&lt;/a> (это категория Википедии, содержащая все описанные в ней парадоксы).&lt;/p>
&lt;p>Давно писал.&lt;/p>
&lt;p>В философии считалось, что человек знает о чём-то (а не просто &amp;ldquo;считает&amp;rdquo;), когда&lt;br>
а) это истинно&lt;br>
б) человек убеждён в этом&lt;br>
в) у человека есть основания так полагать.&lt;br>
Иными словами, знание = обоснованное верное убеждение.&lt;/p>
&lt;p>Однако в 1963 году вышла краткая статья Эдмунда Л. Гетье III (Is Justified True Belief Knowledge? Edmund L. Gettier &lt;a href="http://www.ditext.com/gettier/gettier.html">http://www.ditext.com/gettier/gettier.html&lt;/a>), показывающая некоторую уязвимость такого определения &lt;em>знания&lt;/em>. Вот один рассмотренный пример:&lt;br>
Смит и Джон подали заявление о приёме на работу в одно и то же место. Джон знает, что у Смита в левом кармане лежит монетка в 10 центов (он заглянул к нему в карман), и что, по уверениям владельца компании, Смит будет принят на работу. Таким образом, Джон знает, что &amp;ldquo;на работу будет принят человек, у которого в левом кармане лежит десятицентовая монета&amp;rdquo; (А). Теперь пусть окажется, что на самом деле Джона примут на работу, и что у него тоже лежит десятицентовая монета в левом кармане (о чём он не знал).&lt;br>
Все три условия выполняются: утверждение (А) истинно, Джон убеждён в нём и у него были на это основания (личный опыт лазанья по карманам и разговор с владельцем компании), однако теперь уже куда сложнее уверенно сказать, что Джон знал (А).&lt;/p>
&lt;p>Проведённые позднее эксперименты с аналогичными утверждениями показали, что на Востоке чаще считают, что Джон знал (А), а на Западе - чаще отрицают это. (Weinberg J., Nichols S., Stich S. Normativity and Epistemic Intuitions // Philosophical Topics. 2001. Vol. 29. No. 1, 2.)&lt;/p>
&lt;p>Изначально узнал об этом из книги &amp;ldquo;Убили бы вы толстяка&amp;rdquo;, но биологический момент про содержащийся в сыре дофамин (а не триптофан, как на самом деле) меня немного разочаровал. Книгу не советую, но про что-то лучшее (на русском языке) об этике/экспериментальной философии не слышал пока.&lt;/p>
&lt;p>Это мой старый, слегка видоизменённый пост из ВК.&lt;/p></content></item><item><title>Проблема с загрузкой css-stylesheet на хостинге github pages</title><link>https://tookser.github.io/posts/css/</link><pubDate>Tue, 16 Nov 2021 22:24:00 +0300</pubDate><guid>https://tookser.github.io/posts/css/</guid><description>Заметил, что на моём сайте не работают стили, хотя они есть, и показалось, что они хотят грузиться через http, хотя у меня https на сайте. Посмотрел - похоже, так и есть, и изменил в hugo схему в адресе сайта на https. Посмотрим, что получится. UPD: да, всё работает корректно. Включения по http в https-странице блокируются современными браузерами.</description><content>&lt;p>Заметил, что на моём сайте не работают стили, хотя они есть, и &lt;em>показалось&lt;/em>, что они хотят грузиться через http, хотя у меня https на сайте. Посмотрел - похоже, так и есть, и изменил в hugo схему в адресе сайта на https. Посмотрим, что получится. UPD: да, всё работает корректно. Включения по http в https-странице блокируются современными браузерами.&lt;/p></content></item><item><title>Мои проекты</title><link>https://tookser.github.io/projects/</link><pubDate>Tue, 16 Nov 2021 17:05:37 +0300</pubDate><guid>https://tookser.github.io/projects/</guid><description>Мои проекты можно посмотреть на github.com/Tookser
Среди них есть (всё на Питоне, если не указано обратное):
Основное Рогалик на основе псевдотерминальной библиотеки. Из интересного – сделан многоклеточный монстр (змейка) и простая анимация, также есть случайная генерация карты.
Реализация настольной игры “Без остановки” для режима hot-seat на PyQT5.
Телеграм-бот для self-help практик на pytelegrambotapi.
Остальное Сверхлокальный психотерапевт (заморожен). Скрипт для делания упражнения из КПТ в браузере.
dump orm – неоконченная попытка сделать что-то похожее на Django ORM.</description><content>&lt;p>Мои проекты можно посмотреть на &lt;a href="https://github.com/Tookser">github.com/Tookser&lt;/a>&lt;/p>
&lt;p>Среди них есть (всё на Питоне, если не указано обратное):&lt;/p>
&lt;h1 id="основное">Основное&lt;/h1>
&lt;p>&lt;a href="https://github.com/Tookser/RatsNBlobs">Рогалик&lt;/a> на основе псевдотерминальной библиотеки. Из интересного – сделан многоклеточный монстр (змейка) и простая анимация, также есть случайная генерация карты.&lt;/p>
&lt;p>&lt;a href="https://github.com/Tookser/cant-stop-py">Реализация настольной игры “Без остановки”&lt;/a> для режима hot-seat на PyQT5.&lt;/p>
&lt;p>&lt;a href="https://github.com/Tookser/norbi-bot">Телеграм-бот для self-help практик&lt;/a> на pytelegrambotapi.&lt;/p>
&lt;h1 id="остальное">Остальное&lt;/h1>
&lt;p>&lt;a href="https://github.com/Tookser/cbtea-js">Сверхлокальный психотерапевт&lt;/a> (заморожен). Скрипт для делания упражнения из КПТ в браузере.&lt;/p>
&lt;p>&lt;a href="https://github.com/Tookser/dump-orm">dump orm&lt;/a> – неоконченная попытка сделать что-то похожее на Django ORM.&lt;/p>
&lt;p>&lt;a href="https://github.com/Tookser/fade-2048">Игра 2048&lt;/a> на C++ с использованием glwf.&lt;/p></content></item><item><title>Интересные вещи и где они обитают</title><link>https://tookser.github.io/posts/interesting_things/</link><pubDate>Tue, 16 Nov 2021 05:38:12 +0300</pubDate><guid>https://tookser.github.io/posts/interesting_things/</guid><description>Немного интересного. Во-первых, конечно, язык Python. Мы любим его не за скорость (хотя при некоторых условиях он и по этому параметру хорош). Как минимум - это хороший язык для начинающих, кроме того, на нём приятно писать небольшие проекты для себя. Его синтаксис иногда меня восхищает, в том числе своей похожестью на математическую нотацию. Язык Python можно ускорять разными способами.
Алгоритм большинства голосов Бойера-Мура позволяет быстро (за один проход по массиву), без траты памяти найти, какой элемент в массиве встречается чаще всего.</description><content>&lt;p>Немного интересного. Во-первых, конечно, язык &lt;a href="http://www.python.org">Python&lt;/a>. Мы любим его не за скорость (хотя при некоторых условиях он и по этому параметру хорош). Как минимум - это хороший язык для начинающих, кроме того, на нём приятно писать небольшие проекты для себя. Его синтаксис иногда меня восхищает, в том числе своей похожестью на математическую нотацию. Язык Python можно &lt;a href="https://www.pypy.org/">ускорять&lt;/a> &lt;a href="https://cython.org/">разными&lt;/a> &lt;a href="https://numba.pydata.org/">способами&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B8%D0%BD%D1%81%D1%82%D0%B2%D0%B0_%D0%B3%D0%BE%D0%BB%D0%BE%D1%81%D0%BE%D0%B2_%D0%91%D0%BE%D0%B9%D0%B5%D1%80%D0%B0_%E2%80%94_%D0%9C%D1%83%D1%80%D0%B0">Алгоритм большинства голосов Бойера-Мура&lt;/a> позволяет быстро (за один проход по массиву), без траты памяти найти, какой элемент в массиве встречается чаще всего. Требуется, правда, чтобы он составлял простое большинство (допустим, при размере массива в 10 элементов он должен встречаться как минимум 6 раз).&lt;/p>
&lt;p>Наверное, все уже знаю про &lt;a href="https://rudalle.ru/">ruDALL-E&lt;/a> - штуку, позволяющую генерировать по текстовому запросу изображения. Есть и менее известные штуки из области ML. Так, мне кажется достаточно хорошим направлением развития few-show recommendations services. Т.е. рекомендационные сервисы, но позволяющие почти не раскрывать о себе информации сервису, кроме &amp;ldquo;мне нравится этот фильм, и этот, и этот жанр, а этот не нравится&amp;rdquo;. Из такого был хороший movix.ai, но он ушёл в оффлайн. Нашёл нечто подобное, уже не только для фильмов - &lt;a href="https://tastedive.com/games/like/To-The-Moon">tastedive&lt;/a> (по ссылке - рекомендации похожего на одну из моих любимых игр, &lt;strong>To The Moon&lt;/strong>).&lt;/p>
&lt;p>Ещё есть простенькая &lt;a href="https://www.music-map.com/">сеть музыки&lt;/a>, позволяющая побродить по близким группам. Там много всяких штук на проекте &lt;a href="https://www.gnod.com/">GNOD&lt;/a>, включая рекомендовалку музыки по трём любимым группам. Какой-нибудь &lt;a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B0%D0%BD%D1%8C%D0%B5,_%D0%94%D0%B6%D0%B0%D1%80%D0%BE%D0%BD">Ланье&lt;/a> мог бы сказать, что подобная примитивность системы (по сравнению с монструозной рекомендательной штукой вроде livelib-а) наоборот действует освобождающе на человека :)&lt;/p></content></item><item><title>Приветствие</title><link>https://tookser.github.io/posts/my-first-post/</link><pubDate>Tue, 16 Nov 2021 05:22:47 +0300</pubDate><guid>https://tookser.github.io/posts/my-first-post/</guid><description>Это мой личный сайт. Здесь написано обо мне и о тех штуках, которые кажутся мне интересными и полезными. Возможно, буду добавлять информацию, уже имею в голове пару тем, которые мне нравятся.</description><content>&lt;p>Это мой личный сайт. Здесь написано обо мне и о тех штуках, которые кажутся мне интересными и полезными. Возможно, буду добавлять информацию, уже имею в голове пару тем, которые мне нравятся.&lt;/p></content></item><item><title>Обо мне</title><link>https://tookser.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tookser.github.io/about/</guid><description>Выпускник СУНЦ МГУ, выпускник ВМК МГУ.
Владею python, немного знаком с Django, из других библиотек знаю pytorch, numpy, numba, pytelegrambotapi, networkx. Также знаком с linux на уровне не совсем начинающего пользователя. Знаю C и C++, а ещё имею базовые знания Verilog и Javascript.
Люблю и знаю дискретную математику и алгоритмы.
Прошёл интернет-курс по машинному зрению на платформе Stepic, а также поучаствовал в курсе от компании VK по автоматизированному тестированию.
Почта для связи: t, 2468, та же буква ещё 3 раза, gmail.</description><content>&lt;p>Выпускник СУНЦ МГУ, выпускник ВМК МГУ.&lt;/p>
&lt;p>Владею python, немного знаком с Django, из других библиотек знаю pytorch, numpy, numba, pytelegrambotapi, networkx. Также знаком с linux на уровне не совсем начинающего пользователя. Знаю C и C++, а ещё имею базовые знания Verilog и Javascript.&lt;/p>
&lt;p>Люблю и знаю дискретную математику и алгоритмы.&lt;/p>
&lt;p>Прошёл интернет-курс по машинному зрению на платформе Stepic, а также поучаствовал в курсе от компании VK по автоматизированному тестированию.&lt;/p>
&lt;p>Почта для связи: t, 2468, та же буква ещё 3 раза, gmail.com.&lt;/p></content></item></channel></rss>